<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zhanliang Liu</title>
    <link>/post/</link>
    <description>Recent content in Posts on Zhanliang Liu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>⛵ Learning Meaning in Natural Language Processing — The Semantics Mega-Thread</title>
      <link>/post/semantic-meaning/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>/post/semantic-meaning/</guid>
      <description>I found a very worthwhile article while surfing medium.com days ago. The article is a summary of a twitter thread which talked about meaning, semantics, language models, learning Thai and Java, entailment, co-reference — all in one fascinating thread. The original article is here.
Following is a copy of the original article:
Last week a tweet by Jacob Andreas triggered a huge discussion on Twitter that many people have called the meaning/semantics mega-thread.</description>
    </item>
    
    <item>
      <title>Filtered-Space Saving Top-K</title>
      <link>/post/topk-in-stream/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>/post/topk-in-stream/</guid>
      <description>Before diving into Filtered-Space Saving algorithm, let us talk about the Space-Saving algorithm first, it was proposed by Metwally et al. in [1]. Space-Saving underlying idea is to monitor only a pre-defined number of m elements and their associated counters. Counters on each element are updated to reflect the maximum possible number of times an element has been observed and the error that might be involved in that estimate. If an element that is already being monitored occurs again, the counter for the frequency estimate is incremented.</description>
    </item>
    
    <item>
      <title>Gödel’s First Incompleteness Theorem for Programmers</title>
      <link>/post/godels-first-incompleteness-theorem/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>/post/godels-first-incompleteness-theorem/</guid>
      <description>Gödel’s incompleteness theorems have been hailed as “the greatest mathematical discoveries of the 20th century” — indeed, the theorems apply not only to mathematics, but all formal systems and have deep implications for science, logic, computer science, philosophy, and so on. In this post, I’ll give a simple but rigorous sketch of Gödel’s First Incompleteness Theorem. Formally, it states that:
 Any consistent formal system $S$ within which a “certain amount of elementary arithmetic” can be carried out is incomplete; i.</description>
    </item>
    
    <item>
      <title>Weighted Random: algorithms for sampling from discrete probability distributions</title>
      <link>/post/weighted-random/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>/post/weighted-random/</guid>
      <description>Introduction First of all what is weighted random? Let&amp;rsquo;s say you have a list of items and you want to pick one of them randomly. Doing this seems easy as all that&amp;rsquo;s required is to write a litte function that generates a random index referring to the one of the items in the list. But sometimes plain randomness is not enough, we want random results that are biased or based on some probability.</description>
    </item>
    
    <item>
      <title>Illustration of the logistic map</title>
      <link>/post/logistic-map/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>/post/logistic-map/</guid>
      <description>Illustration of the logistic map, $x_{n+1} = f(x_n) = r \cdot x_n \cdot (1 - x_n)$
At $r_1=3$, a stable period $2^1=2$ orbit is born. At $r_2=3.449$ a stable period $2^2=4$ orbit is born. As $r$ continues to increase, the period doublings continue until $r_{\infty} \approx 3.56995$ after which chaotic dynamics begin to occur, interspersed with periodic windows.
The Feigeinbaum constant $\delta=4.6692\dots$ is the ratio of subsequent differences between the values of $r_n$ at which the period doubles, as $n$ approaches infinity.</description>
    </item>
    
    <item>
      <title>Academic: the website designer for Hugo</title>
      <link>/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>Academic is a framework to help you create a beautiful website quickly. Perfect for personal sites, blogs, or business/project sites. Check out the latest demo of what you&amp;rsquo;ll get in less than 10 minutes. Then head on over to the Quick Start guide or take a look at the Release Notes.

Key features:
 Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.</description>
    </item>
    
    <item>
      <title>Linux process and thread</title>
      <link>/post/linux-process-and-thread/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0800</pubDate>
      
      <guid>/post/linux-process-and-thread/</guid>
      <description>In Linux, fork() is used to create new processes. These new processes are called as child processes and each child process initially shares all the segments like text, stack, heap etc until child tries to make any change to stack or heap. In case of any change, a seperate copy of stack and heap segments are prepared for child so that changes remain child specific. The text segment is read-only so both parent and child share the same text segment.</description>
    </item>
    
  </channel>
</rss>